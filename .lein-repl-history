(get [0 1 2 3] 0)
(get [0 1 2 3] 2)
exit
(def china {:name "China", :birth-year 1972})
(def chine {:name "Chine", :birth-year 1999})
(def kirja {:title "Kirjanen" :authors [china])
(def kirja {:title "Kirjanen" :authors [china]})
(let [(get kirja :authors) kirjailijat])
(let [(:authors kirja) kirjailijat])
(let [(:authors) kirjailijat])
kirja
(conj :authors kirja [chine])
(conj :authors kirja chine)
(def book1 {:title "Book1" :authors [aut1, aut2]})
(def book1 {:title "Book1" :authors ["aut1", "aut2"]})
(:authors book1)
(conj (:authors book1) "lol")
(exit)
exit
(defn munge [x] (+ x 42))
(map munge [1 2 3 4])
(defn munge [x] (^ -1 x))
(user 'clojure.contrib.math)
(use 'clojure.contrib.math)
(use 'clojure.math.numberic-tower)
(use 'clojure.math.numeric-tower)
(use 'clojure.math)
(defn pow [b e] (Math/pow b e))
(map pow -1 [1 2 3 4])
pow(-1 2)
(pow -1 2)
(pow -1 1)
(defn pow [-1 e] (Math/pow b e))
(defn pow [e] (Math/pow -1 e))
(map pow [1 2 3 4])
exit
(second [1 2 3 4 5])
exit
(first [1 2 3 4 5])
(rest [1 2 3 4 5])
(rest [a b c d])
(rest [5 4 3 2 1])
(first (rest [5 4 3 2 1]))
exit
(< [1 2 3])
(> [1 2 3])
(map [1 2 3])
(apply < [1 2 3])
(apply > [1 2 3])
(apply > [1 3 2])
(apply < [1 3 2])
(defn mono [x] ((apply < x) or (apply > x)))
exit
(str "Moi" "moi")
(str (repeat 5 "*"))
(str (repeat 5 *))
(str (repeat 5 "*"))
(apply str (repeat 5 "*"))
exit
